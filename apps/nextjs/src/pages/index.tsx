import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import type { inferProcedureOutput } from "@trpc/server";
import type { AppRouter } from "@acme/api";
import { useAuth, UserButton } from "@clerk/nextjs";
import Link from "next/link";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Legend,
} from 'chart.js';
import { Line } from 'react-chartjs-2';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Legend
);


export const options = {
  responsive: true,
  plugins: {
    legend: {
      display: false,
      position: 'top' as const,
    },
    title: {
      display: false,
      text: 'Chart.js Line Chart',
    },
  },
  elements: {
    point: {
      radius: 1,

    }
  },
  scales: {
    x: {
      type: 'linear',
      display: false
    },
    y: {
      display: false
    }
  }
};

const SessionCard: React.FC<{
  session: inferProcedureOutput<AppRouter['session']['recentWithDisplayData']>[number];
}> = ({ session }) => {
  return (
    <div className="max-w-2xl flex flex-row rounded-lg border-2 border-gray-500 p-4 transition-all hover:scale-[101%]">
      <div className='flex flex-col'>
        <h2 className="text-2xl font-bold text-[#19489f]">
          {session.name}
        </h2>
        <p className='text-gray-500'>{session.id}</p>
      </div>
      <div className='ml-5 h-20'>
        <Line
          //@ts-ignore
          options={options}
          data={{
            labels: session.accelerationX.map((_, i) => i),
            datasets: [
              {
                label: 'Dataset 1',
                data: session.accelerationX,
                borderColor: '#19489f',
              },
            ],
          }}
        />
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const sessionQuery = trpc.session.recentWithDisplayData.useQuery({ limit: 5 })

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center ">
        <div className="container flex flex-row items-center justify-center gap-12 px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            AI Gear
          </h1>
          <AuthShowcase />
        </div>

        <div className="flex h-max justify-center overflow-y-scroll px-4 text-2xl">

          <div className="flex flex-col gap-4">
            {sessionQuery.data ? (
              <div className="flex flex-col gap-4">
                {sessionQuery.data?.map((p) => {
                  return <SessionCard key={p.id} session={p} />;
                })}
              </div>
            ) : (
              <p>Loading..</p>
            )}
          </div>

        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { isSignedIn } = useAuth();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {isSignedIn && (
        <div className="flex items-center justify-center">
          <UserButton
            appearance={{
              elements: {
                userButtonAvatarBox: {
                  width: "4rem",
                  height: "4rem",
                },
              },
            }}
          />
        </div>
      )}
      {!isSignedIn && (
        <p className="text-center text-2xl">
          <Link href="/sign-in">Sign In</Link>
        </p>
      )}
    </div>
  );
};
